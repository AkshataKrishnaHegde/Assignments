1)Multithreading refers to a process of executing two or more threads simulataneously for maximum utilization of the CPU. Its main purpose is to provide simultaneous execution of multiple threads to utilize the CPU time as much as possible.

2)The benefits of multi threadding are:
*Responsiveness –
Multithreading in an interactive application may allow a program to continue running even if a part of it is blocked or is performing a lengthy operation, thereby increasing responsiveness to the user.
In a non multi threaded environment, a server listens to the port for some request and when the request comes, it processes the request and then resume listening to another request. The time taken while processing of request makes other users wait unnecessarily. Instead a better approach would be to pass the request to a worker thread and continue listening to port.
*Resource Sharing –
Processes may share resources only through techniques such as-
=>Message Passing
=>Shared Memory
Such techniques must be explicitly organized by programmer. However, threads share the memory and the resources of the process to which they belong by default.
The benefit of sharing code and data is that it allows an application to have several threads of activity within same address space.
*Economy –
Allocating memory and resources for process creation is a costly job in terms of time and space.
Since, threads share memory with the process it belongs, it is more economical to create and context switch threads. Generally much more time is consumed in creating and managing processes than in threads.
In Solaris, for example, creating process is 30 times slower than creating threads and context switching is 5 times slower.
*Scalability –
The benefits of multi-programming greatly increase in case of multiprocessor architecture, where threads may be running parallel on multiple processors. If there is only one thread then it is not possible to divide the processes into smaller tasks that different processors can perform.
Single threaded process can run only on one processor regardless of how many processors are available.
Multi-threading on a multiple CPU machine increases parallelism.

3)Thread is a very-light weighted process, or we can say the smallest part of the process that allows a program to opearate more efficiently by running multiple tasks simultaneously.

4)The two ways of implementing thread in java are:
*By extending thread class
For Ex:
class Message extends Thread{

    public void run()
    {
        System.out.println("Displaying important message task");
        try{
            for(int i=0;i<3;i++)
            {
                System.out.println("Focus is important to master skills");
                Thread.sleep(2000);
            }
        }
        catch(Exception e)
        {
            System.out.println("Some problem");
        }


        System.out.println("Displaying import message task ended");

    }
}



public class Mt2 {
    public static void main(String[] args) {

        System.out.println("Main Thread started");

        Message t2 = new Message();
        t2.start();
    }
}


*By implementing runnable interface.
For ex:
class Message1 implements Runnable{

    public void run()
    {
        System.out.println("Displaying important message task");
        try{
            for(int i=0;i<3;i++)
            {
                System.out.println("Focus is important to master skills");
                Thread.sleep(2000);
            }
        }
        catch(Exception e)
        {
            System.out.println("Some problem");
        }


        System.out.println("Displaying import message task ended");

    }
}



public class Mt3
{
    public static void main(String[] args)
    {

        System.out.println("Main Thread started");

        Calc1 c1=new Calc1();
        Thread t1 = new Thread(c1);
        t1.start();
    }

}
5)
Ans: Thread: It simply refers to the smallest units of the particular process. It has the ability to execute different parts of the program at the same time.
Process: It simply refers to a program that is in execution that is an active program. A process can be handled using Process Control Block.

6)Daemon thread in java is a low-priority thread that runs in the background to perform tasks such as garbage collection.
We can use the setDaemon mthod of Thread classto create a daemon thread.
For Ex:
 public class Mt11 extends Thread
        {
            public Mt11(String name){
                super(name);
            }
            public void run()
            {
                if(Thread.currentThread().isDaemon())
                {
                    System.out.println(getName() + " is Daemon thread");
                }
                else
                {
                    System.out.println(getName() + " is User thread");
                }
            }
            public static void main(String[] args)
            {
                Mt11 m1 = new Mt11("m1");
                Mt11 m2 = new Mt11("m2");
                Mt11 m3 = new Mt11("m3");
                m1.setDaemon(true);
                m1.start();
                m2.start();
                m3.setDaemon(true);
                m3.start();
            }
        }

7)
wait(): wait() is a non-static method that causes the current thread to wait and go to
sleep until some other threads call the notify () or notifyAll() method for the object’s monitor. It simply releases the lock and is mostly used for inter-thread communication. It is defined in the object class, and
should only be called from a synchronized context.
Example:
synchronized void put(int j) {
        try {
            if (valueInX == true) {
                wait();
            }
            else {

                x = j;
                System.out.println("I have produced the data into x" + x);
                valueInX=true;
                notify();
            }
        }
        catch (Exception e){
            System.out.println("There is some problem");
        }
    }

sleep(): sleep() is a static method that pauses or stops the execution of the current thread for
some specified period. It doesn’t release the lock while waiting and is mostly used to introduce pause on execution.
Example:

class MyThread1 extends Thread{

    public void run() {
        String t = Thread.currentThread().getName();
        if(t.equals("CALC"))
        {
            calc();
        }
        else {
            importantMsg();
        }
    }
    public void calc()
    {
        System.out.println("Calculation Task Started");

        Scanner sc=new Scanner(System.in);
        System.out.println("Please enter first number");
        int num1=sc.nextInt();

        System.out.println("Please enter 2nd number");
        int num2=sc.nextInt();

        int res=num1+num2;

        System.out.println(res);
        System.out.println("Calculation Task Ended");

        System.out.println("****************************************************");
    }
    public void importantMsg(){

        System.out.println("Displaying important message task");
        try{
            for(int i=0;i<3;i++)
            {
                System.out.println("Focus is important to master skills");
                Thread.sleep(2000);
            }
        }
        catch(Exception e)
        {
            System.out.println("Some problem");
        }


        System.out.println("Displaying import message task ended");


    }
}
public class Mt4
{
    public static void main(String[] args)
    {

        System.out.println("Main Thread started");

        MyThread1 t1= new MyThread1(); //new state
        MyThread1 t2 = new MyThread1();

        t1.setName("CALC");
        t2.setName("PRINT");
        t1.start(); //runnable state
        t2.start();


    }

}

